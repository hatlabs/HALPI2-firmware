#!/usr/bin/env bash
#
# usage: ./run.sh command [argument ...]
#
# Commands used during development / CI.
# Also, executable documentation for project dev practices.
#
# See https://death.andgravity.com/run-sh
# for an explanation of how it works and why it's useful.

################################################################################
# Project-specific commands follow.

function cargo-clean {
  # Clean the cargo build directory.
  # This is useful to remove all compiled artifacts and start fresh.
  cargo clean $@
}

function clean {
  # Remove all temporary files and directories.
  cargo-clean
}

function build {
  # Build the project.
  cargo build $@
}

function get-version {
  VERSION=$(grep -m1 '^version = ' firmware/Cargo.toml | cut -d'"' -f2)
  echo "$VERSION"
}

function build-binary {
  # Build the project binary.
  build --release
  # Get version from Cargo.toml
  VERSION=$(get-version)
  mkdir -p firmware/artifacts
  cargo objcopy --release -- -O binary firmware/artifacts/halpi2-rs-firmware_${VERSION}.bin
}

function build-uf2 {
  # Build the project binary.
  build --release
  # Get version from Cargo.toml
  VERSION=$(get-version)
  mkdir -p firmware/artifacts
  elf2uf2-rs target/thumbv6m-none-eabi/release/halpi2-rs-firmware firmware/artifacts/halpi2-rs-firmware_${VERSION}.uf2
}


function run {
  # Run the project.
  cargo run $@
}

function upload {
  cargo flash --chip RP2040 $@
}

function flash {
  # Alias for upload.
  upload $@
}

function monitor {
  probe-rs attach --chip RP2040 target/thumbv6m-none-eabi/debug/halpi2-rs-firmware $@
}

function attach {
  monitor $@
}

function build-bootloader {
  cargo build -p bootloader --release $@
}

function flash-bootloader {
  # Flash the bootloader.
  cargo flash --chip RP2040 --release -p bootloader $@
}

function flash-all {
  build-bootloader
  build --release
  # Flash the bootloader and the firmware.
  flash-bootloader
  upload
}

function copy-to-tester {
  # Copy the firmware binary to the tester directory.
  build-bootloader
  build --release
  VERSION=$(get-version)
  BOOTLOADER_VERSION=$(cargo pkgid -p bootloader | sed 's/.*#//')
  cp target/thumbv6m-none-eabi/release/bootloader ../HALPI2-tests/tests/200_controller/files/halpi2-rs-bootloader_${BOOTLOADER_VERSION}.elf
  cp target/thumbv6m-none-eabi/release/halpi2-rs-firmware ../HALPI2-tests/tests/200_controller/files/halpi2-rs-firmware_${VERSION}.elf
}

function build-debian {
  _env
  # We don't want to include the build artifacts in the Debian package.
  echo "üèóÔ∏è Building Debian package..."
  export DEBEMAIL="info@hatlabs.fi"
  export DEBFULLNAME="Hat Labs CI"
  export FIRMWARE_VERSION=$(cat firmware/VERSION)
  DEB_VERSION=$(echo "$FIRMWARE_VERSION" | sed 's/-\([a-zA-Z]\)/~\1/g')

	envsubst < debian/install.in > debian/install

  # Create a new changelog entry
  dch --newversion "$DEB_VERSION" \
      --distribution stable \
      --force-distribution \
      "Automated release $FIRMWARE_VERSION. See GitHub for details."

  dpkg-buildpackage -us -uc -b
}

function convert-artifacts {
  mkdir -p artifacts

  BOOTLOADER_VERSION=$(cargo pkgid -p bootloader | sed 's/.*#//')
  FIRMWARE_VERSION=$(cat firmware/VERSION)

  # Copy original ELF files
  cp target/thumbv6m-none-eabi/release/bootloader artifacts/halpi2-rs-bootloader_${BOOTLOADER_VERSION}.elf
  cp target/thumbv6m-none-eabi/release/halpi2-rs-firmware artifacts/halpi2-rs-firmware_${FIRMWARE_VERSION}.elf

  # Convert each ELF to UF2 and BIN
  for elf in artifacts/*.elf; do
    if [ -f "$elf" ]; then
      base=$(basename "$elf" .elf)
      echo "Converting $base..."

      # Convert to UF2 (for bootsel mode flashing)
      elf2uf2-rs "$elf" "artifacts/${base}.uf2"

      # Convert to BIN (for some programming tools)
      cargo objcopy --release -- -O binary artifacts/halpi2-rs-firmware_${FIRMWARE_VERSION}.bin

      echo "‚úì Created ${base}.uf2 and ${base}.bin"
    fi
  done
}

function debtools {
  export DIR_NAME=$(basename "$PWD")
  docker compose -f docker/docker-compose.debtools.yml run --rm debtools "$@"
}

function build-debtools {
  # Build the Debian package using the debtools container.
  export DIR_NAME=$(basename "$PWD")
  docker compose -f docker/docker-compose.debtools.yml build debtools "$@"
}

function debtools-build {
  # Build the Debian package using the debtools container.
  debtools ./run build-debian
}

function build-all {
  build-bootloader
  build --release
  convert-artifacts
  debtools-build
}

################################################################################
# Project-specific commands end.

# First, set up the environment.
# (Check the notes at the end when changing this.)

set -o nounset
set -o pipefail
set -o errexit

# Enable this to echo commands as they are executed.
#set -o xtrace

# Change the current directory to the project root.
PROJECT_ROOT=${0%/*}
if [[ $0 != $PROJECT_ROOT && $PROJECT_ROOT != "" ]]; then
  cd "$PROJECT_ROOT"
fi
readonly PROJECT_ROOT=$(pwd)

# Store the absolute path to this script (useful for recursion).
readonly SCRIPT="$PROJECT_ROOT/$(basename "$0")"

################################################################################
# Meta-commands and utilities follow.

function help {
  # list all "public" functions (those not beginning with an underscore)
  # defined in this file
  printf "%s <task> [args]\n\nTasks:\n" "${0}"
  compgen -A function | grep -v "^_" | cat -n

  printf "\nExtended help:\n  Each task has comments for general usage\n"
}

once_hash_array=()
function _once {
  # Run a command only once during the execution of this script, even if it's
  # called multiple times.
  #
  # Usage:
  #   _once <command> [argument ...]
  #
  # Example:
  #   _once echo "Hello"
  #   _once echo "Hello"  # won't be executed

  local command="$*"
  local hash=$(echo "$command" | shasum | cut -d' ' -f1)
  if [[ ! " ${once_hash_array[@]} " =~ " ${hash} " ]]; then
    once_hash_array+=("$hash")
    eval "$command"
  fi
}

function _env {
  echo "üóùÔ∏è Setting environment from .env and .env.defaults"
  # Go through the files and export all variables not already present in
  # the environment. First file has precedence!
  if [ -f .env ]; then
    _export_unset .env
  else
    # Make sure a .env file exists, otherwise docker-compose will complain
    cp .env.defaults .env
  fi
  if [ -f .env.defaults ]; then
    _export_unset .env.defaults
  fi
}

function _export_unset {
  local file="$1"

  # Need to use a temp file to avoid a subshell
  local tmpfile=$(mktemp)
  grep -v '^#' $file >$tmpfile

  while read -r line; do
    if [[ ! "$line" =~ ^[[:space:]]*$ ]]; then
      varname=$(echo "$line" | cut -d= -f1)
      if [[ -z "${!varname:-}" ]]; then
        eval $line
        export $varname
      fi
    fi
  done <$tmpfile
  rm $tmpfile
}

function _test_export_unset {
  _export_unset .env
  env | sort
}

# Dispatch to command. A simpler version would be just "$@" (with the quotes!).

TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"

# Some dev notes for this script.
#
# The commands *require*:
#
# * The current working directory is the project root.
# * The shell options and globals are set as they are.
#
# Inspired by the following:
#  - https://death.andgravity.com/run-sh
#  - http://www.oilshell.org/blog/2020/02/good-parts-sketch.html
#  - https://www.youtube.com/watch?v=SdmYd5hJISM&t=7s
